{
	"selector": "source.rust",
	"command": ["${storage_path}/LSP-rust-analyzer/rust-analyzer"],
	"settings": {

		// Settings Not Related to rust-analyzer Server

		// Wether or not to automatically close terminus panel/tab upon completion.
		"rust-analyzer.terminusAutoClose": false,
		// Wether or not to spawn a panel at the bottom, or a new tab
		"rust-analyzer.terminusUsePanel": false,

		// Rust-Analyzer Server Settings

		// Whether to allow import insertion to merge new imports into single path glob imports like
		// `use std::fmt::*;`.
		"rust-analyzer.assist.allowMergingIntoGlobImports": true,
		// Placeholder for missing expressions in assists.
		// possible values: todo, default
		"rust-analyzer.assist.exprFillDefault": "todo",
		// Whether to enforce the import granularity setting for all files. If set to false rust-
		// analyzer will try to keep import styles consistent per file.
		"rust-analyzer.assist.importEnforceGranularity": false,
		// How imports should be grouped into use statements.
		// possible values: preserve, crate, module, item
		"rust-analyzer.assist.importGranularity": "crate",
		// Group inserted imports by the [following order](https://rust-
		// analyzer.github.io/manual.html#auto-import). Groups are separated by newlines.
		"rust-analyzer.assist.importGroup": true,
		// The path structure for newly inserted paths to use.
		// possible values: plain, self, crate
		"rust-analyzer.assist.importPrefix": "plain",
		// Warm up caches on project load.
		"rust-analyzer.cache.warmup": true,
		// Show function name and docs in parameter hints.
		"rust-analyzer.callInfo.full": true,
		// Activate all available features (`--all-features`).
		"rust-analyzer.cargo.allFeatures": false,
		// Automatically refresh project info via `cargo metadata` on
		// `Cargo.toml` changes.
		"rust-analyzer.cargo.autoreload": true,
		// List of features to activate.
		"rust-analyzer.cargo.features": [],
		// Do not activate the `default` feature.
		"rust-analyzer.cargo.noDefaultFeatures": false,
		// Internal config for debugging, disables loading of sysroot crates.
		"rust-analyzer.cargo.noSysroot": false,
		// Run build scripts (`build.rs`) for more precise code analysis.
		"rust-analyzer.cargo.runBuildScripts": true,
		// Compilation target (target triple).
		"rust-analyzer.cargo.target": null,
		// Unsets `#[cfg(test)]` for the specified crates.
		"rust-analyzer.cargo.unsetTest": [
		    "core"
		],
		// Use `RUSTC_WRAPPER=rust-analyzer` when running build scripts to
		// avoid compiling unnecessary things.
		"rust-analyzer.cargo.useRustcWrapperForBuildScripts": true,
		// Custom cargo runner extension ID.
		"rust-analyzer.cargoRunner": null,
		// Check with all features (`--all-features`).
		// Defaults to `#rust-analyzer.cargo.allFeatures#`.
		"rust-analyzer.checkOnSave.allFeatures": null,
		// Check all targets and tests (`--all-targets`).
		"rust-analyzer.checkOnSave.allTargets": true,
		// Cargo command to use for `cargo check`.
		"rust-analyzer.checkOnSave.command": "check",
		// Run specified `cargo check` command for diagnostics on save.
		"rust-analyzer.checkOnSave.enable": true,
		// Extra arguments for `cargo check`.
		"rust-analyzer.checkOnSave.extraArgs": [],
		// List of features to activate. Defaults to
		// `#rust-analyzer.cargo.features#`.
		"rust-analyzer.checkOnSave.features": null,
		// Do not activate the `default` feature.
		"rust-analyzer.checkOnSave.noDefaultFeatures": null,
		// Advanced option, fully override the command rust-analyzer uses for
		// checking. The command should include `--message-format=json` or
		// similar option.
		"rust-analyzer.checkOnSave.overrideCommand": null,
		// Check for a specific target. Defaults to
		// `#rust-analyzer.cargo.target#`.
		"rust-analyzer.checkOnSave.target": null,
		// Whether to add argument snippets when completing functions.
		// Only applies when `#rust-analyzer.completion.addCallParenthesis#` is set.
		"rust-analyzer.completion.addCallArgumentSnippets": true,
		// Whether to add parenthesis when completing functions.
		"rust-analyzer.completion.addCallParenthesis": true,
		// Toggles the additional completions that automatically add imports when completed.
		// Note that your client must specify the `additionalTextEdits` LSP client capability to
		// truly have this feature enabled.
		"rust-analyzer.completion.autoimport.enable": true,
		// Toggles the additional completions that automatically show method calls and field
		// accesses
		// with `self` prefixed to them when inside a method.
		"rust-analyzer.completion.autoself.enable": true,
		// Whether to show postfix snippets like `dbg`, `if`, `not`, etc.
		"rust-analyzer.completion.postfix.enable": true,
		// Enables completions of private items and fields that are defined in the current workspace
		// even if they are not visible at the current position.
		"rust-analyzer.completion.privateEditable.enable": false,
		// Custom completion snippets.
		"rust-analyzer.completion.snippets": {
		    "Box::pin": {
		        "requires": "std::boxed::Box",
		        "scope": "expr",
		        "body": "Box::pin(\\${receiver})",
		        "description": "Put the expression into a pinned `Box`",
		        "postfix": "pinbox"
		    },
		    "Ok": {
		        "scope": "expr",
		        "body": "Ok(\\${receiver})",
		        "description": "Wrap the expression in a `Result::Ok`",
		        "postfix": "ok"
		    },
		    "Rc::new": {
		        "requires": "std::rc::Rc",
		        "scope": "expr",
		        "body": "Rc::new(\\${receiver})",
		        "description": "Put the expression into an `Rc`",
		        "postfix": "rc"
		    },
		    "Some": {
		        "scope": "expr",
		        "body": "Some(\\${receiver})",
		        "description": "Wrap the expression in an `Option::Some`",
		        "postfix": "some"
		    },
		    "Arc::new": {
		        "requires": "std::sync::Arc",
		        "scope": "expr",
		        "body": "Arc::new(\\${receiver})",
		        "description": "Put the expression into an `Arc`",
		        "postfix": "arc"
		    },
		    "Err": {
		        "scope": "expr",
		        "body": "Err(\\${receiver})",
		        "description": "Wrap the expression in a `Result::Err`",
		        "postfix": "err"
		    }
		},
		// List of rust-analyzer diagnostics to disable.
		"rust-analyzer.diagnostics.disabled": [],
		// Whether to show native rust-analyzer diagnostics.
		"rust-analyzer.diagnostics.enable": true,
		// Whether to show experimental rust-analyzer diagnostics that might
		// have more false positives than usual.
		"rust-analyzer.diagnostics.enableExperimental": false,
		// Map of prefixes to be substituted when parsing diagnostic file paths.
		// This should be the reverse mapping of what is passed to `rustc` as `--remap-path-prefix`.
		"rust-analyzer.diagnostics.remapPrefix": {},
		// List of warnings that should be displayed with hint severity.
		// The warnings will be indicated by faded text or three dots in code
		// and will not show up in the `Problems Panel`.
		"rust-analyzer.diagnostics.warningsAsHint": [],
		// List of warnings that should be displayed with info severity.
		// The warnings will be indicated by a blue squiggly underline in code
		// and a blue icon in the `Problems Panel`.
		"rust-analyzer.diagnostics.warningsAsInfo": [],
		// Expand attribute macros.
		"rust-analyzer.experimental.procAttrMacros": true,
		// These directories will be ignored by rust-analyzer. They are
		// relative to the workspace root, and globs are not supported. You may
		// also need to add the folders to Code's `files.watcherExclude`.
		"rust-analyzer.files.excludeDirs": [],
		// Controls file watching implementation.
		"rust-analyzer.files.watcher": "client",
		// Enables highlighting of related references while hovering your mouse `break`, `loop`,
		// `while`, or `for` keywords.
		"rust-analyzer.highlightRelated.breakPoints": true,
		// Enables highlighting of all exit points while hovering your mouse above any `return`,
		// `?`, or return type arrow (`->`).
		"rust-analyzer.highlightRelated.exitPoints": true,
		// Enables highlighting of related references while hovering your mouse above any
		// identifier.
		"rust-analyzer.highlightRelated.references": true,
		// Enables highlighting of all break points for a loop or block context while hovering your
		// mouse above any `async` or `await` keywords.
		"rust-analyzer.highlightRelated.yieldPoints": true,
		// Use semantic tokens for strings.
		// In some editors (e.g. vscode) semantic tokens override other highlighting grammars.
		// By disabling semantic tokens for strings, other grammars can be used to highlight
		// their contents.
		"rust-analyzer.highlighting.strings": true,
		// Whether to show documentation on hover.
		"rust-analyzer.hover.documentation": true,
		// Use markdown syntax for links in hover.
		"rust-analyzer.hover.linksInHover": true,
		// Whether to show `Debug` action. Only applies when
		// `#rust-analyzer.hoverActions.enable#` is set.
		"rust-analyzer.hoverActions.debug": true,
		// Whether to show HoverActions in Rust files.
		"rust-analyzer.hoverActions.enable": true,
		// Whether to show `Go to Type Definition` action. Only applies when
		// `#rust-analyzer.hoverActions.enable#` is set.
		"rust-analyzer.hoverActions.gotoTypeDef": true,
		// Whether to show `Implementations` action. Only applies when
		// `#rust-analyzer.hoverActions.enable#` is set.
		"rust-analyzer.hoverActions.implementations": true,
		// Whether to show `References` action. Only applies when
		// `#rust-analyzer.hoverActions.enable#` is set.
		"rust-analyzer.hoverActions.references": false,
		// Whether to show `Run` action. Only applies when
		// `#rust-analyzer.hoverActions.enable#` is set.
		"rust-analyzer.hoverActions.run": true,
		// Whether to show inlay type hints for method chains.
		"rust-analyzer.inlayHints.chainingHints": true,
		// Whether to show inlay type hints for return types of closures with blocks.
		"rust-analyzer.inlayHints.closureReturnTypeHints": false,
		// Whether to show inlay hints.
		"rust-analyzer.inlayHints.enable": true,
		// Whether to hide inlay hints for constructors.
		"rust-analyzer.inlayHints.hideNamedConstructorHints": false,
		// Whether to show inlay type hints for elided lifetimes in function signatures.
		// possible values: always, never, skip_trivial
		"rust-analyzer.inlayHints.lifetimeElisionHints.enable": "never",
		// Whether to prefer using parameter names as the name for elided lifetime hints if
		// possible.
		"rust-analyzer.inlayHints.lifetimeElisionHints.useParameterNames": false,
		// Maximum length for inlay hints. Set to null to have an unlimited length.
		"rust-analyzer.inlayHints.maxLength": 25,
		// Whether to show function parameter name inlay hints at the call
		// site.
		"rust-analyzer.inlayHints.parameterHints": true,
		// Whether to show inlay type hints for compiler inserted reborrows.
		"rust-analyzer.inlayHints.reborrowHints": false,
		// Whether to render trailing colons for parameter hints, and trailing colons for parameter
		// hints.
		"rust-analyzer.inlayHints.renderColons": true,
		// Whether to show inlay type hints for variables.
		"rust-analyzer.inlayHints.typeHints": true,
		// Join lines merges consecutive declaration and initialization of an assignment.
		"rust-analyzer.joinLines.joinAssignments": true,
		// Join lines inserts else between consecutive ifs.
		"rust-analyzer.joinLines.joinElseIf": true,
		// Join lines removes trailing commas.
		"rust-analyzer.joinLines.removeTrailingComma": true,
		// Join lines unwraps trivial blocks.
		"rust-analyzer.joinLines.unwrapTrivialBlock": true,
		// Whether to show `Debug` lens. Only applies when
		// `#rust-analyzer.lens.enable#` is set.
		"rust-analyzer.lens.debug": true,
		// Whether to show CodeLens in Rust files.
		"rust-analyzer.lens.enable": true,
		// Whether to show `References` lens for Enum Variants.
		// Only applies when `#rust-analyzer.lens.enable#` is set.
		"rust-analyzer.lens.enumVariantReferences": false,
		// Internal config: use custom client-side commands even when the
		// client doesn't set the corresponding capability.
		"rust-analyzer.lens.forceCustomCommands": true,
		// Whether to show `Implementations` lens. Only applies when
		// `#rust-analyzer.lens.enable#` is set.
		"rust-analyzer.lens.implementations": true,
		// Whether to show `Method References` lens. Only applies when
		// `#rust-analyzer.lens.enable#` is set.
		"rust-analyzer.lens.methodReferences": false,
		// Whether to show `References` lens for Struct, Enum, Union and Trait.
		// Only applies when `#rust-analyzer.lens.enable#` is set.
		"rust-analyzer.lens.references": false,
		// Whether to show `Run` lens. Only applies when
		// `#rust-analyzer.lens.enable#` is set.
		"rust-analyzer.lens.run": true,
		// Disable project auto-discovery in favor of explicitly specified set
		// of projects.
		// Elements must be paths pointing to `Cargo.toml`,
		// `rust-project.json`, or JSON objects in `rust-project.json` format.
		"rust-analyzer.linkedProjects": [],
		// Number of syntax trees rust-analyzer keeps in memory. Defaults to 128.
		"rust-analyzer.lruCapacity": null,
		// Whether to show `can't find Cargo.toml` error message.
		"rust-analyzer.notifications.cargoTomlNotFound": true,
		// How many worker threads to to handle priming caches. The default `0` means to pick
		// automatically.
		"rust-analyzer.primeCaches.numThreads": 0,
		// Enable support for procedural macros, implies `#rust-analyzer.cargo.runBuildScripts#`.
		"rust-analyzer.procMacro.enable": true,
		// These proc-macros will be ignored when trying to expand them.
		// This config takes a map of crate names with the exported proc-macro names to ignore as
		// values.
		"rust-analyzer.procMacro.ignored": {},
		// Internal config, path to proc-macro server executable (typically,
		// this is rust-analyzer itself, but we override this in tests).
		"rust-analyzer.procMacro.server": null,
		// Environment variables passed to the runnable launched using `Test` or `Debug` lens or
		// `rust-analyzer.run` command.
		"rust-analyzer.runnableEnv": null,
		// Additional arguments to be passed to cargo for runnables such as
		// tests or binaries. For example, it may be `--release`.
		"rust-analyzer.runnables.cargoExtraArgs": [],
		// Command to be executed instead of 'cargo' for runnables.
		"rust-analyzer.runnables.overrideCargo": null,
		// Path to the Cargo.toml of the rust compiler workspace, for usage in rustc_private
		// projects, or "discover" to try to automatically find it if the `rustc-dev` component
		// is installed.
		// Any project which uses rust-analyzer with the rustcPrivate
		// crates must set `[package.metadata.rust-analyzer] rustc_private=true` to use it.
		// This option does not take effect until rust-analyzer is restarted.
		"rust-analyzer.rustcSource": null,
		// Enables the use of rustfmt's unstable range formatting command for the
		// `textDocument/rangeFormatting` request. The rustfmt option is unstable and only
		// available on a nightly build.
		"rust-analyzer.rustfmt.enableRangeFormatting": false,
		// Additional arguments to `rustfmt`.
		"rust-analyzer.rustfmt.extraArgs": [],
		// Advanced option, fully override the command rust-analyzer uses for
		// formatting.
		"rust-analyzer.rustfmt.overrideCommand": null,
		// Workspace symbol search kind.
		// possible values: only_types, all_symbols
		"rust-analyzer.workspace.symbol.search.kind": "only_types",
		// Limits the number of items returned from a workspace symbol search (Defaults to 128).
		// Some clients like vs-code issue new searches on result filtering and don't require all
		// results to be returned in the initial search.
		// Other clients requires all results upfront and might require a higher limit.
		"rust-analyzer.workspace.symbol.search.limit": 128,
		// Workspace symbol search scope.
		// possible values: workspace, workspace_and_dependencies
		"rust-analyzer.workspace.symbol.search.scope": "workspace",
	},
	"experimental_capabilities": {
		// empty for now
	}
}

